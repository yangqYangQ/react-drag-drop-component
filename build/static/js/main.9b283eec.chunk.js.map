{"version":3,"sources":["DragAndDrop.js","App.js","serviceWorker.js","index.js"],"names":["dragAndDrop","data","dispatch","className","inDropZone","onDragEnter","e","preventDefault","stopPropagation","type","dropDepth","handleDragEnter","onDragLeave","handleDragLeave","onDragOver","dataTransfer","dropEffect","handleDragOver","onDrop","files","length","existingFiles","fileList","map","file","name","filter","includes","filesToDrop","clearData","handleDrop","App","useReducer","state","action","concat","DragAndDrop","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQA4DeA,EAxDK,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,SA4CxB,OACI,yBAAKC,UAAWF,EAAKG,WAAa,kCAAoC,iBACjEC,YAAa,SAACC,GAAD,OA5CE,SAACA,GACrBA,EAAEC,iBACFD,EAAEE,kBACFN,EAAS,CAACO,KAAM,iBAAkBC,UAAWT,EAAKS,UAAY,IAyCrCC,CAAgBL,IACpCM,YAAa,SAACN,GAAD,OAtCE,SAACA,GACrBA,EAAEC,iBACFD,EAAEE,kBAEFN,EAAS,CAACO,KAAM,iBAAkBC,UAAWT,EAAKS,UAAY,IAC1DT,EAAKS,UAAY,GACrBR,EAAS,CAACO,KAAM,mBAAoBL,YAAY,IAgCvBS,CAAgBP,IACpCQ,WAAY,SAACR,GAAD,OA7BE,SAACA,GACpBA,EAAEC,iBACFD,EAAEE,kBAEFF,EAAES,aAAaC,WAAa,OAC5Bd,EAAS,CAACO,KAAM,mBAAoBL,YAAY,IAwBxBa,CAAeX,IAClCY,OAAQ,SAACZ,GAAD,OArBE,SAACA,GAChBA,EAAEC,iBACFD,EAAEE,kBAEF,IAAIW,EAAK,YAAOb,EAAES,aAAaI,OAC/B,GAAIA,GAASA,EAAMC,OAAS,EAAG,CAC3B,IAAMC,EAAgBpB,EAAKqB,SAASC,KAAI,SAACC,GAAD,OAAUA,EAAKC,QACvDN,EAAQA,EAAMO,QAAO,SAACF,GAAD,OAAWH,EAAcM,SAASH,EAAKC,SAE5DvB,EAAS,CAACO,KAAM,oBAAqBmB,YAAaT,IAClDb,EAAES,aAAac,YACf3B,EAAS,CAACO,KAAM,iBAAkBC,UAAW,IAC7CR,EAAS,CAACO,KAAM,mBAAoBL,YAAY,KAShC0B,CAAWxB,KAE3B,0DClBGyB,MAjCf,WACI,IADW,EAccC,sBAbT,SAACC,EAAOC,GACpB,OAAQA,EAAOzB,MACX,IAAK,iBACD,OAAO,eAAIwB,EAAX,CAAkBvB,UAAWwB,EAAOxB,YACxC,IAAK,mBACD,OAAO,eAAIuB,EAAX,CAAkB7B,WAAY8B,EAAO9B,aACzC,IAAK,oBACD,OAAO,eAAI6B,EAAX,CAAkBX,SAAUW,EAAMX,SAASa,OAAOD,EAAON,eAC7D,QACI,OAAO,eAAIK,MAIsB,CACzCvB,UAAW,EACXN,YAAY,EACZkB,SAAU,KAjBH,mBAcJrB,EAdI,KAcEC,EAdF,KAoBX,OACI,yBAAKC,UAAU,OACX,6DACA,kBAACiC,EAAD,CAAanC,KAAMA,EAAMC,SAAUA,IACnC,wBAAIC,UAAU,eAENF,EAAKqB,SAASC,KAAI,SAACC,GAAD,OAAU,wBAAIa,IAAKb,EAAKC,MAAOD,EAAKC,YClBtDa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9b283eec.chunk.js","sourcesContent":["//拖拽组件\r\n\r\nimport React from 'react';\r\n\r\nconst dragAndDrop = ({data, dispatch}) => {\r\n    //拖入\r\n    const handleDragEnter = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        dispatch({type: 'SET_DROP_DEPTH', dropDepth: data.dropDepth + 1});\r\n    };\r\n\r\n    //拖出\r\n    const handleDragLeave = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        dispatch({type: 'SET_DROP_DEPTH', dropDepth: data.dropDepth - 1});\r\n        if (data.dropDepth > 0) return;\r\n        dispatch({type: 'SET_IN_DROP_ZONE', inDropZone: false});\r\n    };\r\n\r\n    //正在当前元素范围内拖拽\r\n    const handleDragOver = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        e.dataTransfer.dropEffect = 'copy';\r\n        dispatch({type: 'SET_IN_DROP_ZONE', inDropZone: true});\r\n    };\r\n\r\n    //完成拖入动作\r\n    const handleDrop = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n\r\n        let files = [...e.dataTransfer.files];\r\n        if (files && files.length > 0) {\r\n            const existingFiles = data.fileList.map((file) => file.name);\r\n            files = files.filter((file) => !existingFiles.includes(file.name));\r\n\r\n            dispatch({type: 'SET_FILES_TO_DROP', filesToDrop: files});\r\n            e.dataTransfer.clearData();\r\n            dispatch({type: 'SET_DROP_DEPTH', dropDepth: 0});\r\n            dispatch({type: 'SET_IN_DROP_ZONE', inDropZone: false});\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={data.inDropZone ? 'drag-drop-zone inside-drag-area' : 'drag-drop-zone'}\r\n             onDragEnter={(e) => handleDragEnter(e)}\r\n             onDragLeave={(e) => handleDragLeave(e)}\r\n             onDragOver={(e) => handleDragOver(e)}\r\n             onDrop={(e) => handleDrop(e)}\r\n        >\r\n            <p>Drap files here to Upload</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default dragAndDrop;","import React, {useReducer} from 'react';\nimport './App.css';\nimport DragAndDrop from './DragAndDrop';\n\nfunction App() {\n    const reducer = (state, action) => {\n        switch (action.type) {\n            case 'SET_DROP_DEPTH':\n                return {...state, dropDepth: action.dropDepth};\n            case 'SET_IN_DROP_ZONE':\n                return {...state, inDropZone: action.inDropZone};\n            case 'SET_FILES_TO_DROP':\n                return {...state, fileList: state.fileList.concat(action.filesToDrop)};\n            default:\n                return {...state};\n        }\n    };\n\n    const [data, dispatch] = useReducer(reducer, {\n        dropDepth: 0,        //在拖拽区的文件个数\n        inDropZone: false,   //是否在拖拽区\n        fileList: []         //被拖拽进来的文件\n    });\n\n    return (\n        <div className=\"App\">\n            <h1>React drap and drop component</h1>\n            <DragAndDrop data={data} dispatch={dispatch}/>\n            <ol className='dropedFiles'>\n                {\n                    data.fileList.map((file) => <li key={file.name}>{file.name}</li>)\n                }\n            </ol>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}